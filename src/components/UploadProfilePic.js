import React, { Component } from 'react'
import { connect } from 'react-redux'
import {SET_PROFILE_PIC_PREVIEW} from '../actions/rootActions'

class UploadProfilePic extends Component {

	constructor(props) {
		super(props)
		this.state = {
			empty: true,
			selectedPic: null,
			selectedBase64: null
		}
	}

	handleUpload(files) {
		const pic = files[0]

		//verify if gotten image
		if(pic && pic.type.includes('image/')) {
			console.log("image")

			//set current pic as selected
			this.displayPreview(pic)
		}
		else console.log('not image')
	}

	async displayPreview(uri) {
		const reader = new FileReader()
		console.log(reader)

		reader.onload = e => {
			console.log(e.target.result)

			//update store
			this.props.setPreviewPic(e.target.result)
			this.setState( { selectedBase64: e.target.result, empty: false } )
		}

		reader.readAsDataURL(uri)
	}

	render() {
		return (
			<label className='import-profile-pic file-import-label'>
				{this.state.empty ? 

				<div>
					<svg className='file-import-logo' width="120" height="120" viewBox="0 0 120 120" fill="none" xmlns="http://www.w3.org/2000/svg">
						<path d="M60 119.5C59.1752 119.5 58.3543 119.483 57.5377 119.45L57.5174 119.95C55.851 119.882 54.2022 119.746 52.5736 119.545L52.6348 119.049C50.9967 118.846 49.3792 118.578 47.7853 118.245L47.6831 118.735C46.0547 118.395 44.4505 117.989 42.8735 117.52L43.0159 117.041C41.437 116.571 39.8855 116.038 38.3644 115.444L38.1825 115.91C36.637 115.306 35.1227 114.641 33.6426 113.916L33.8625 113.467C32.386 112.744 30.9438 111.961 29.5391 111.122L29.2828 111.552C27.8604 110.702 26.4761 109.796 25.1331 108.835L25.424 108.428C24.0888 107.473 22.7947 106.464 21.5449 105.405L21.2216 105.786C19.9597 104.716 18.7426 103.595 17.5736 102.426L17.9272 102.073C16.7678 100.913 15.656 99.7065 14.5951 98.4551L14.2137 98.7784C13.1453 97.5182 12.128 96.2133 11.165 94.8669L11.5717 94.576C10.6191 93.2442 9.72007 91.8714 8.87779 90.4609L8.4485 90.7172C7.60264 89.3007 6.8135 87.8464 6.08423 86.3574L6.53326 86.1375C5.8144 84.6698 5.15422 83.1682 4.55574 81.6356L4.09 81.8175C3.49096 80.2836 2.95323 78.7189 2.47982 77.1266L2.95909 76.9841C2.49417 75.4203 2.0918 73.8295 1.75489 72.2148L1.26543 72.3169C0.93005 70.7094 0.658992 69.0783 0.455075 67.4264L0.951309 67.3652C0.751937 65.7501 0.617276 64.1149 0.550015 62.4623L0.0504282 62.4826C0.0169179 61.6592 0 60.8316 0 60H0.5C0.5 59.1752 0.51678 58.3543 0.550015 57.5377L0.0504282 57.5174C0.118248 55.851 0.254029 54.2022 0.455075 52.5736L0.951308 52.6348C1.15353 50.9967 1.42232 49.3792 1.75489 47.7853L1.26543 47.6831C1.60519 46.0547 2.01096 44.4505 2.47982 42.8735L2.95909 43.0159C3.42852 41.437 3.96173 39.8855 4.55574 38.3644L4.08999 38.1825C4.69353 36.637 5.3593 35.1227 6.08422 33.6426L6.53325 33.8625C7.25642 32.386 8.03897 30.9438 8.87778 29.5391L8.44849 29.2828C9.29785 27.8604 10.2044 26.4761 11.165 25.1331L11.5717 25.424C12.5267 24.0888 13.5355 22.7947 14.5951 21.5449L14.2137 21.2216C15.2835 19.9597 16.4045 18.7426 17.5736 17.5736L17.9271 17.9272C19.0865 16.7678 20.2935 15.656 21.5449 14.5951L21.2216 14.2137C22.4818 13.1453 23.7867 12.128 25.1331 11.165L25.424 11.5717C26.7558 10.6191 28.1286 9.72007 29.5391 8.87779L29.2828 8.4485C30.6993 7.60264 32.1536 6.8135 33.6426 6.08423L33.8625 6.53326C35.3302 5.8144 36.8318 5.15422 38.3644 4.55574L38.1825 4.09C39.7164 3.49096 41.2811 2.95323 42.8734 2.47983L43.0159 2.95909C44.5797 2.49417 46.1705 2.0918 47.7852 1.75489L47.6831 1.26543C49.2906 0.93005 50.9217 0.658992 52.5736 0.455075L52.6348 0.951309C54.2499 0.751937 55.8851 0.617276 57.5377 0.550015L57.5174 0.0504282C58.3408 0.0169179 59.1684 0 60 0V0.5C60.8248 0.5 61.6457 0.51678 62.4623 0.550015L62.4826 0.0504282C64.149 0.118248 65.7978 0.254029 67.4264 0.455075L67.3652 0.951308C69.0033 1.15353 70.6208 1.42232 72.2148 1.75489L72.3169 1.26543C73.9453 1.60519 75.5495 2.01096 77.1265 2.47982L76.9841 2.95909C78.563 3.42852 80.1145 3.96173 81.6356 4.55574L81.8175 4.08999C83.363 4.69353 84.8773 5.3593 86.3574 6.08422L86.1375 6.53325C87.614 7.25642 89.0562 8.03897 90.4609 8.87778L90.7172 8.44849C92.1396 9.29785 93.5239 10.2044 94.8669 11.165L94.576 11.5717C95.9112 12.5267 97.2053 13.5355 98.4551 14.5951L98.7784 14.2137C100.04 15.2835 101.257 16.4045 102.426 17.5736L102.073 17.9271C103.232 19.0865 104.344 20.2935 105.405 21.5449L105.786 21.2216C106.855 22.4818 107.872 23.7867 108.835 25.1331L108.428 25.424C109.381 26.7558 110.28 28.1286 111.122 29.5391L111.551 29.2828C112.397 30.6993 113.187 32.1536 113.916 33.6426L113.467 33.8625C114.186 35.3302 114.846 36.8318 115.444 38.3644L115.91 38.1825C116.509 39.7164 117.047 41.2811 117.52 42.8734L117.041 43.0159C117.506 44.5797 117.908 46.1705 118.245 47.7852L118.735 47.6831C119.07 49.2906 119.341 50.9217 119.545 52.5736L119.049 52.6348C119.248 54.2499 119.383 55.8851 119.45 57.5377L119.95 57.5174C119.983 58.3408 120 59.1684 120 60H119.5C119.5 60.8248 119.483 61.6457 119.45 62.4623L119.95 62.4826C119.882 64.149 119.746 65.7978 119.545 67.4264L119.049 67.3652C118.846 69.0033 118.578 70.6208 118.245 72.2148L118.735 72.3169C118.395 73.9453 117.989 75.5495 117.52 77.1265L117.041 76.9841C116.571 78.563 116.038 80.1145 115.444 81.6356L115.91 81.8175C115.306 83.363 114.641 84.8773 113.916 86.3574L113.467 86.1375C112.744 87.614 111.961 89.0562 111.122 90.4609L111.552 90.7172C110.702 92.1396 109.796 93.5239 108.835 94.8669L108.428 94.576C107.473 95.9112 106.464 97.2053 105.405 98.4551L105.786 98.7784C104.716 100.04 103.595 101.257 102.426 102.426L102.073 102.073C100.913 103.232 99.7065 104.344 98.4551 105.405L98.7784 105.786C97.5182 106.855 96.2133 107.872 94.8669 108.835L94.576 108.428C93.2442 109.381 91.8714 110.28 90.4609 111.122L90.7172 111.551C89.3007 112.397 87.8464 113.187 86.3574 113.916L86.1375 113.467C84.6698 114.186 83.1682 114.846 81.6356 115.444L81.8175 115.91C80.2836 116.509 78.7189 117.047 77.1265 117.52L76.9841 117.041C75.4203 117.506 73.8295 117.908 72.2148 118.245L72.3169 118.735C70.7094 119.07 69.0783 119.341 67.4264 119.545L67.3652 119.049C65.7501 119.248 64.1149 119.383 62.4623 119.45L62.4826 119.95C61.6592 119.983 60.8316 120 60 120V119.5Z" fill="#F5F8FA" stroke="#CAD4DF" strokeDasharray="5"/>
						<path fillRule="evenodd" clipRule="evenodd" d="M72.8 49C72.8 56.0576 67.0576 61.8 60 61.8C52.9424 61.8 47.2 56.0576 47.2 49V45.8C47.2 38.7424 52.9424 33 60 33C67.0576 33 72.8 38.7424 72.8 45.8V49ZM60 65C68.5888 65 74.9312 66.6416 78.7376 68.0192C81.8848 69.1568 84 72.1776 84 75.5392V82.6C84 83.4832 83.2832 84.2 82.4 84.2H37.6C36.7168 84.2 36 83.4832 36 82.6V75.5392C36 72.1776 38.1152 69.1568 41.2624 68.0192C45.0688 66.6416 51.4112 65 60 65Z" fill="#CAD4DF"/>
					</svg>
					<svg className='file-import-logo-plus' width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
						<path fillRule="evenodd" clipRule="evenodd" d="M16 32C24.8366 32 32 24.8366 32 16C32 7.16344 24.8366 0 16 0C7.16344 0 0 7.16344 0 16C0 24.8366 7.16344 32 16 32Z" fill="#6264DB"/>
						<path fillRule="evenodd" clipRule="evenodd" d="M16.7613 10.3999H15.2375V15.238H10.3994V16.7618H15.2375V21.5999H16.7613V16.7618H21.5994V15.238H16.7613V10.3999Z" fill="white"/>
					</svg>
				</div>
				

				:
				<div className='empty-box'>
					<img className='file-import-preview' src={ this.state.selectedBase64 } alt="profile pic"/>
				</div>
				}

				<input className='file-import-input' type="file" accept='image/*' onChange={e => this.handleUpload(e.target.files)}/>
			</label>
		)
	}
}

const mapStateToProps = (state) => ({
	profilePicPreview: state.profilePicPreviewBase64,
})

const mapDispatchToProps = (dispatch) => {
	return {
		setPreviewPic: (base64) => {
			dispatch(SET_PROFILE_PIC_PREVIEW(base64))
		}
	}
}

export default connect(mapStateToProps, mapDispatchToProps)(UploadProfilePic)